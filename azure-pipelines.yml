trigger:
  branches:
    include:
      - main  

variables:
  imageName: ghcr.io/amansk5/nodejs-api
  tag: $(Build.BuildId)
  helmChartPath: nodejs-api-chart
  namespace: nodejs

stages:
  - stage: Build
    displayName: Build and Push Docker Image
    jobs:
      - job: Build
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self

          # Optional: Validate Dockerfile exists
          - script: |
              echo "Listing root directory..."
              ls -la
              echo "Checking for Dockerfile..."
              if [ ! -f "dockerfile" ]; then
                echo "ERROR: dockerfile not found!"
                exit 1
              fi
            displayName: "Validate dockerfile exists"

          - task: Docker@2
            displayName: Build Docker image
            inputs:
              command: buildAndPush
              repository: $(imageName)
              tags: |
                $(tag)
              dockerfile: dockerfile
              containerRegistry: GHCRConnection

  - stage: Deploy
    displayName: Deploy to AKS
    dependsOn: Build
    jobs:
      - deployment: DeployToAKS
        environment: aks-nodejs
        pool:
          vmImage: ubuntu-latest
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Kubernetes@1
                  displayName: Set context
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: 'AKSConnection'
                    namespace: $(namespace)
                    command: get
                    arguments: nodes

                # Optional: Debug step to verify kubeconfig
                - script: |
                    echo "Checking current Kubernetes context..."
                    kubectl config current-context
                    kubectl get nodes
                  displayName: "Verify Kubernetes context"

                - task: HelmInstaller@1
                  displayName: Install Helm
                  inputs:
                    helmVersionToInstall: 'latest'

                - script: |
                    helm upgrade --install nodejs-api $(helmChartPath) \
                      --namespace $(namespace) \
                      --set image.repository=$(imageName) \
                      --set image.tag=$(tag)
                  displayName: Helm Upgrade
